#!/usr/bin/env bash

kc() {
    context_name=$(kubectl config get-contexts -o=name | fzf)
    if [ ! -z $context_name ]; then
        kubectl config use-context "$context_name"
    else
        echo "k8s context not changed"
    fi
}

kgp() {
    kubectl get pods | fzf --header-lines=1 | awk '{ print $1 }'
}

kgps() {
    pod=$(kgp)
    kubectl exec -it "$pod" -- /bin/sh
}

kubetunnel() {
    pod_search_options=""
    namespace=(`kubectl config view --minify --output 'jsonpath={..namespace}' | tr -d ' '`)
    ARGS=()
    while [[ $# -gt 0 ]]
    do
        key="$1"

        case $key in
        -n|--namespace)
            namespace="$2"
            shift
            shift
            ;;
        -a|--all-namespaces)
            pod_search_options="$pod_search_options --all-namespaces"
            shift
            ;;
        *)
            ARGS+=("$1")
            shift
            ;;
        esac
    done
    set -- "${ARGS[@]}" # restore positional parameters

    kube_pod_row=(`kubectl get pods $pod_search_options | grep "$1" | head -n 1`)
    pod="$kube_pod_row[1]"
    dest_address="$2"
    local_port="${3:=5000}"

    if [ -z "$pod" ]; then
        echo "$1 is not found"
        return 1
    fi

    if [ -z "$dest_address" ]; then
        echo "$2 is not found"
        return 1
    fi

    if [ -z "$pod" -o -z "$dest_address" ]; then
    	echo "Usage: kubetunnel <pod name> <destination address> [local port]"
        echo ""
        echo "Required"
        echo "\tpod name: target pod name"
        echo "\tdestination address: target address and port"
        echo "Optional"
        echo "\tlocal port: local binding port"
        return 1
    fi
    echo "Connect to 127.0.0.1:$local_port to access $pod:$dest_address"
    tcpserver 127.0.0.1 "$local_port" \
        kubectl exec -n "$namespace" -i "$pod" -- nc "$dest_address"
}

ssh_list() {
    server_name="$(sed -rn 's/^\s*Host\s+(.*)\s*/\1/ip' ~/.ssh/config | fzf)"
    if [ "$server_name" = "" ]; then
        return
    fi
    echo "Connect to $server_name"
    ssh $server_name
}

fshow() {
    git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
        --bind "ctrl-m:execute:
                    (grep -o '[a-f0-9]\{7\}' | head -1 |
                    xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                    {} FZF-EOF"
}

fbr() {
    local branches branch
    branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
    branch=$(echo "$branches" |
            fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
