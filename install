#!/bin/bash
##############################################################
#
# Luavis' dotfiles
#
# @author Luavis
# @date 2016.07.29
#
##############################################################


print_error() {
    local msg=$1
    echo -e "\033[0;31m${msg}\033[0m"
}

print_blue() {
    local msg=$1
    echo -e "\033[1;34m${msg}\033[0m"
}

print_green() {
    local msg=$1
    echo -e "\033[0;32m${msg}\033[0m"
}

print_install() {
    local program=$1
    print_green "==============================================="
    print_green "Install ${program}"
}

print_skip() {
    local program=$1
    print_error "${program} already installed............[Skip]"
}

function realpath {
    local base=$(basename $1)
    local d=$(dirname $1)
    (cd $d ; echo $(/bin/pwd)/$base)
}

##############################################################
# Install scripts
##############################################################

xcode_command_line_install() {
    # check xcode commandline is pre-installed
    local xcode_installed=$(xcode-select -p 2>/dev/null)
    echo $xcode_installed
    if [ "$xcode_installed" = "" ];
    then
        print_install "Xcode command line tools"
        `xcode-select --install`
        echo "Try again after install xcode-select"
        exit 1
    else
        print_skip "Xcode command line tool"
    fi
}

brew_install() {
    local brew_installed=$(brew --version 2>/dev/null)
    if [[ "$brew_installed" = "" ]]; then
        print_install "Homebrew"
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
        print_skip "Homebrew"
    fi
}

run_brew_script() {
    # download brewfile
    print_install "brews"
    # update latest homebrew
    brew update
    # upgrade all package
    brew upgrade

    brew bundle
    brew cleanup
    # accep xcode build after install
    sudo xcodebuild -license accept
}

nvim_setting() {
    # Install neovim-python; vim-plug requires neovim-python
    sudo easy_install pip
    if [[ "$(which pip)" != "" ]]; then
        pip install --user neovim jedi
    else
        echo 'You need to install python-pip first'
        exit
    fi

    cp -r ./nvim ~/.config
    curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    nvim +PlugInstall +PlugUpdate +PlugClean! +qall
}

vscode_setting() {
    code --install-extension ms-vscode.python
    code --install-extension ms-vscode.Go
    code --install-extension ms-vscode.vscode-typescript-tslint-plugin
    code --install-extension Equinusocio.vsc-material-theme
    code --install-extension ms-azuretools.vscode-docker
    code --install-extension basdp.language-gas-x86
    code --install-extension PKief.material-icon-theme

    cp ./vscode_settings.json "$HOME/Library/Application Support/Code/User/settings.json"
}

run_ext_scripts() {
    print_install "Run ext scripts"
    script_dir="$(pwd)/ext"
    for script in "${script_dir}/"*
    do
        case "${script}" in
            *.sh)
                if [ -f "${script}" -a -x "${script}" ]; then
                    "${script}" $@
                fi
            ;;
        esac
    done
}

setup() {
    print_install "Install oh-my-zsh"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    # install ZSH Theme
    git clone https://github.com/zdharma/fast-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting
    git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

    print_install "Change user shell to zsh"
    chsh -s /bin/zsh
    print_install "Copy dotfiles"
    cp .zshrc "${HOME}/.zshrc"
    cp .aliases "${HOME}/.aliases"
    cp .functions "${HOME}/.functions"
    cp .exports "${HOME}/.exports"
    cp .gitconfig "${HOME}/.gitconfig"
    cp .gitignore "${HOME}/.gitignore"
    cp .tmux.conf "${HOME}/.tmux.conf"
    cp .fzf.zsh "${HOME}/.fzf.zsh"

    print_install "Run .macos"

    # Run settingup macos
    # ./.macos

    read -r -p "Do you want reboot system? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY])
        sudo shutdown -r now
        ;;
    esac
}

help() {
    print_blue "Luavis dotfiles"
    echo ""
    echo "Usage:"
    echo "install [option]        Run install scipts(if options is not set run all scripts)"
    echo ""
    echo "Option:"
    echo ""
    echo "xcode         Run xcode command line install, if it is not installed"
    echo "brew          Install brew from internet"
    echo "brew_bundle       Run brew bundle"
    echo "vscode           Config vscode editor preferences"
    echo "nvim          Config nvim preferences"
    echo "dots          Copy dotfiles and run .macos"
    echo "ext           Run ext scripts in ext directory"
    echo "help          Print this help message and exit"
    exit 0
}

if [ "$1" = "" ]; then
    # sudo mode
    sudo -v
    xcode_command_line_install
    brew_install
    run_brew_script
    vscode_setting
    nvim_setting
    run_ext_scripts

    setup
elif [ "$1" = "help" ]; then
    help
else
    case "$1" in
        xcode)
        sudo -v
        xcode_command_line_install
        ;;
        brew)
        sudo -v
        brew_install
        ;;
        brew_bundle)
        sudo -v
        run_brew_script
        ;;
        nvim)
        sudo -v
        nvim_setting
        ;;
        vscode)
        sudo -v
        vscode_setting
        ;;
        ext)
        sudo -v
        run_ext_scripts
        ;;
        dots)
        sudo -v
        setup
        ;;
        *)
        print_error "Wrong command $1"
        help
        ;;
    esac
fi

