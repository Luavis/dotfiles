#!/bin/sh

abspath() {
    pushd "$1" &> /dev/null
    if [[ $? != 0 ]]; then
        return 1;
    fi
    pwd -P
    exit_code=$?
    popd &> /dev/null
    return ${exit_code}
}

print_error() {
    local msg=$1
    echo "\033[0;31m${msg}\033[0m"
}

print_blue() {
    local msg=$1
    echo "\033[1;34m${msg}\033[0m"
}

print_green() {
    local msg=$1
    echo "\033[0;32m${msg}\033[0m"
}

print_log() {
    local msg="$1 "
    local status=" [$2]"
    columns=$(tput cols)
    msg_width="${#msg}"
    status_width="${#status}"
    adjust=$(( (columns - (msg_width + status_width) ) ))
    printf "$msg"
    printf '%*s' "$adjust" | tr ' ' '.'
    printf "$status"
}

log_skip() {
    print_log "$1" 'Skip'
}

log_ok() {
    print_log "$1" 'OK'
}

# macos
install_xcode_command_line() {
    # check xcode commandline is pre-installed
    local xcode_installed=$(xcode-select -p 2>/dev/null)
    if [ "$xcode_installed" = "" ]; then
        xcode-select --install
        echo "Try again after install xcode-select"
        exit 1
    else
        log_skip "Xcode command line tool"
    fi
}

install_homebrew() {
    local brew_installed=$(brew --version 2>/dev/null)
    if [[ "$brew_installed" = "" ]]; then
        sudo -u "$(logname)" /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        log_ok "Homebrew"
    else
        log_skip "Homebrew"
    fi
}

install_brew_bundle() {
    caffeinate -i sudo -u "$(logname)" brew bundle --file "$(pwd)/brew/Brewfile"
    log_ok "Install brew bundles"
}

change_shell() {
    chsh -s $(which zsh) "$(logname)"
    log_ok "Change shell"
}

install_omz() {
    if [[ -d "$HOME/.oh-my-zsh" ]]; then
        log_skip "Oh My Zsh"
    else
        sudo -u "$(logname)" RUNZSH=no sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        log_ok "Oh My Zsh"
    fi
}

install_zsh_plugins() {
    FAST_SYNTAX_HIGHLIGHTING_PATH="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting"
    AUTO_SUGGESTIONS_PATH="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions"
    if [ -d "$FAST_SYNTAX_HIGHLIGHTING_PATH" ]; then
        log_skip "Install zsh - fast syntax highlighting"
    else
        # fast syntax highlighting
        git clone https://github.com/zdharma/fast-syntax-highlighting.git "$FAST_SYNTAX_HIGHLIGHTING_PATH"
        log_ok "Install zsh plugin - fast syntax highlighting"
    fi

    if [ -d "$AUTO_SUGGESTIONS_PATH" ]; then
        log_skip "Install zsh - auto suggestions"
    else
        # auto suggestions
        git clone https://github.com/zsh-users/zsh-autosuggestions "$AUTO_SUGGESTIONS_PATH"
        log_ok "Install zsh - auto suggestions"
    fi
}

copy_dotfiles() {
    find . -name ".*" ! -path . ! -name '.DS_Store' ! -name '.git' -exec cp -r "{}" "$HOME/" \;
    log_ok "Copy dotfiles"
}

audit_zsh() {
    chmod g-w,o-w /usr/local/share/zsh
    chmod g-w,o-w /usr/local/share/zsh/site-functions
    log_ok "Audit zsh"
}

install_vim_plug() {
    sudo -u "$(logname)" sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    nvim +PlugInstall +PlugUpdate +PlugClean! +qall
}

mkdirs() {
    if [ ! -d "$HOME/Projects" ]; then
        mkdir "$HOME/Projects"
    fi

    if [ ! -d "$HOME/Projects/go" ]; then
        mkdir "$HOME/Projects/go"
    fi

    log_ok "Set directories"
}

setup_vscode() {
    sudo -u "$(logname)" code --install-extension ms-python.python
    sudo -u "$(logname)" code --install-extension ms-vscode.sublime-keybindings
    sudo -u "$(logname)" code --install-extension golang.go
    sudo -u "$(logname)" code --install-extension Equinusocio.vsc-material-theme
    sudo -u "$(logname)" code --install-extension pkief.material-icon-theme

    sudo -u "$(logname)" cp './vscode/settings.json' "$HOME/Library/Application Support/Code/User/settings.json"
    log_ok "Set up vscode"
}

setup_macos() {
    install_xcode_command_line
    install_homebrew
    install_brew_bundle
    change_shell
    install_omz
    install_zsh_plugins
    copy_dotfiles
    audit_zsh
    install_vim_plug
    setup_vscode

    mkdirs
}

setup() {
    if [[ $(uname) = "Darwin" ]]; then
        setup_macos
    elif [[ $(uname) = "Linux" && -f /etc/arch-release ]]; then
        echo "not implemented"
    else
        print_error "This script only support macOS or Arhclinux"
        exit 1
    fi
}

if [[ $EUID -ne 0 ]]; then
    print_error "This script must be run as root"
    exit 1
else
    setup
fi

